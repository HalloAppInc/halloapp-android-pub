// automatically generated by the FlatBuffers compiler, do not modify

package com.halloapp.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Media extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static Media getRootAsMedia(ByteBuffer _bb) { return getRootAsMedia(_bb, new Media()); }
  public static Media getRootAsMedia(ByteBuffer _bb, Media obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Media __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public long width() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long height() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public byte encryptionKey(int j) { int o = __offset(10); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int encryptionKeyLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector encryptionKeyVector() { return encryptionKeyVector(new ByteVector()); }
  public ByteVector encryptionKeyVector(ByteVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer encryptionKeyAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer encryptionKeyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public byte plaintextHash(int j) { int o = __offset(12); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int plaintextHashLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector plaintextHashVector() { return plaintextHashVector(new ByteVector()); }
  public ByteVector plaintextHashVector(ByteVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer plaintextHashAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer plaintextHashInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public String downloadUrl() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer downloadUrlAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer downloadUrlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }

  public static int createMedia(FlatBufferBuilder builder,
      byte type,
      long width,
      long height,
      int encryption_keyOffset,
      int plaintext_hashOffset,
      int download_urlOffset) {
    builder.startTable(6);
    Media.addDownloadUrl(builder, download_urlOffset);
    Media.addPlaintextHash(builder, plaintext_hashOffset);
    Media.addEncryptionKey(builder, encryption_keyOffset);
    Media.addHeight(builder, height);
    Media.addWidth(builder, width);
    Media.addType(builder, type);
    return Media.endMedia(builder);
  }

  public static void startMedia(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(0, type, 0); }
  public static void addWidth(FlatBufferBuilder builder, long width) { builder.addInt(1, (int)width, (int)0L); }
  public static void addHeight(FlatBufferBuilder builder, long height) { builder.addInt(2, (int)height, (int)0L); }
  public static void addEncryptionKey(FlatBufferBuilder builder, int encryptionKeyOffset) { builder.addOffset(3, encryptionKeyOffset, 0); }
  public static int createEncryptionKeyVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createEncryptionKeyVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startEncryptionKeyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addPlaintextHash(FlatBufferBuilder builder, int plaintextHashOffset) { builder.addOffset(4, plaintextHashOffset, 0); }
  public static int createPlaintextHashVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createPlaintextHashVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startPlaintextHashVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addDownloadUrl(FlatBufferBuilder builder, int downloadUrlOffset) { builder.addOffset(5, downloadUrlOffset, 0); }
  public static int endMedia(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Media get(int j) { return get(new Media(), j); }
    public Media get(Media obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

