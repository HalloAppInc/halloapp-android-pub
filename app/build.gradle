
plugins {
    id "io.sentry.android.gradle" version "3.1.0"
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

def getLocalProperty(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return ""
    }
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

sentry {
    tracingInstrumentation {
        enabled = false
    }
    autoInstallation {
        enabled = false
    }
}

ext.patchVersion = 9 // at most 3 digits
ext.releaseVersion = 14 // used as minorVersion, at most 2 digits
ext.majorVersion = 1

android {
    compileSdkVersion 33
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.halloapp"
        minSdkVersion 21
        targetSdkVersion 33
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            resValue "bool", "isDebug", "false"
        }
        debug {
            resValue "bool", "isDebug", "true"
        }
        aaptOptions {
            noCompress "tflite"
        }
    }
    flavorDimensions "app"
    productFlavors {
        halloapp {
            dimension "app"
            buildConfigField "boolean", "IS_KATCHUP", "false"
            repositories {
                flatDir {
                    dirs 'libs'
                }
            }
        }
        katchup {
            dimension "app"
            applicationId "com.halloapp.katchup"
            buildConfigField "boolean", "IS_KATCHUP", "true"
        }
    }
    splits {
        abi {
            enable true
            universalApk true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }
}

// Make sure each abi has its own version code https://developer.android.com/studio/build/configure-apk-splits#configure-APK-versions
ext.abiCodes = ['armeabi-v7a':1, x86:2, x86_64:3, 'arm64-v8a':4]
import com.android.build.OutputFile
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def abiVersionCodeSuffix = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
        if (abiVersionCodeSuffix == null) { // If we ever decide to build a universal apk again
            abiVersionCodeSuffix = 0
        }
        def majorVersion = project.ext.majorVersion
        def minorVersion = project.ext.releaseVersion
        def patchVersion = project.ext.patchVersion
        if (minorVersion >= 100 || patchVersion >= 1000) {
            throw new IllegalStateException("Invalid Version Component")
        }
        output.versionCodeOverride = abiVersionCodeSuffix + patchVersion * 10 + minorVersion * 10000 + majorVersion * 1000000
        output.versionNameOverride = "$majorVersion.$minorVersion.$patchVersion"
    }
}

configurations {
    all*.exclude group: 'xpp3', module: 'xpp3'
}

dependencies {
    lintChecks project(":lint-checks")

    // Do not include webrtc in Katchup
    halloappImplementation fileTree(dir: 'libs', include: ['*.jar'])
    halloappImplementation(name: 'libwebrtc', ext:'aar')

    implementation platform('com.google.firebase:firebase-bom:30.5.0') // Ensures firebase libraries are compatible
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'io.sentry:sentry-android:6.1.0'

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.exifinterface:exifinterface:1.2.0'
    implementation 'androidx.navigation:navigation-fragment:2.2.2'
    implementation 'androidx.navigation:navigation-ui:2.2.2'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.paging:paging-runtime:2.1.2'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.security:security-crypto:1.1.0-alpha03'
    implementation 'androidx.work:work-runtime:2.8.1'
    implementation 'at.favre.lib:hkdf:1.1.0'
    implementation 'com.dstukalov:videoconverter:1.9'
    implementation 'com.github.Dimezis:BlurView:version-2.0.0'
    implementation("androidx.palette:palette:1.0.0")
    // TODO(jack): Remove strict versions if dima updates dependencies
    implementation('org.mp4parser:isoparser') {
        version {
            strictly '1.9.41'
        }
    }
    implementation('org.mp4parser:muxer') {
        version {
            strictly '1.9.41'
        }
    }
    implementation('org.mp4parser:streaming') {
        version {
            strictly '1.9.41'
        }
    }
    implementation 'com.google.android.exoplayer:exoplayer:2.13.3'
    implementation 'com.google.android.gms:play-services-auth-api-phone:17.4.0'
    implementation 'com.google.android.material:material:1.6.0'
    implementation 'com.google.crypto.tink:tink-android:1.6.0'
    implementation "com.goterl:lazysodium-android:5.0.2@aar"
    implementation "net.java.dev.jna:jna:5.5.0@aar"
    implementation 'com.google.protobuf:protobuf-javalite:3.11.1'
    implementation 'com.hbb20:ccp:2.5.3'
    implementation 'io.michaelrocks:libphonenumber-android:8.12.19-2'
    implementation 'com.simplecityapps:recyclerview-fastscroll:2.0.1'
    implementation 'com.makeramen:roundedimageview:2.3.0'
    implementation 'me.relex:circleindicator:2.1.6'
    implementation 'pub.devrel:easypermissions:3.0.0'
    implementation "com.android.installreferrer:installreferrer:2.2"
    implementation('com.journeyapps:zxing-android-embedded:4.2.0') { transitive = false }
    implementation 'com.google.zxing:core:3.3.0'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
    implementation "io.noties.markwon:core:4.6.2"
    implementation "io.noties.markwon:editor:4.6.2"
    implementation "io.noties.markwon:ext-strikethrough:4.6.2"
    implementation "io.noties.markwon:inline-parser:4.6.2"
    implementation 'org.jsoup:jsoup:1.12.2'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    def emoji2_version = "1.1.0"

    implementation "androidx.emoji2:emoji2:$emoji2_version"
    implementation "androidx.emoji2:emoji2-views:$emoji2_version"
    implementation "androidx.emoji2:emoji2-views-helper:$emoji2_version"

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    def camerax_version = "1.2.2"
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    implementation "androidx.camera:camera-video:${camerax_version}"
    implementation "androidx.camera:camera-view:${camerax_version}"
    implementation "androidx.camera:camera-extensions:${camerax_version}"

    implementation 'com.huawei.agconnect:agconnect-core:1.6.3.300'
    implementation 'com.huawei.hms:push:6.5.0.300'

    implementation 'com.amplitude:analytics-android:1.5.2'

    implementation 'androidx.core:core-splashscreen:1.0.1'
    implementation 'com.google.mlkit:face-detection:16.1.5'
    implementation 'org.tensorflow:tensorflow-lite:2.10.0'
}

apply plugin: 'com.huawei.agconnect'
